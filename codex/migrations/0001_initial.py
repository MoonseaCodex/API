# Generated by Django 4.0.4 on 2022-05-13 14:28

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='CodexUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('discord_id', models.CharField(blank=True, help_text='Discord ID for bot integration', max_length=32, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Character',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Unnamed character', max_length=64)),
                ('portrait', models.ImageField(upload_to='artwork')),
                ('token', models.ImageField(upload_to='tokens')),
                ('sheet', models.URLField(blank=True, help_text='Link to DND Beyond character sheet', max_length=256, null=True)),
                ('public', models.BooleanField(default=True, help_text='Allow anyone to view this character')),
                ('season', models.IntegerField(default=11, help_text='AL season that this character was created', null=True)),
                ('race', models.CharField(blank=True, max_length=32, null=True)),
                ('classes', models.CharField(blank=True, help_text='Classes and levels', max_length=256, null=True)),
                ('gold', models.FloatField(null=True)),
                ('downtime', models.FloatField(help_text='Days of downtime', null=True)),
                ('ac', models.IntegerField(null=True)),
                ('hp', models.IntegerField(null=True)),
                ('dc', models.IntegerField(null=True)),
                ('vision', models.CharField(blank=True, max_length=64, null=True)),
                ('biography', models.TextField()),
                ('dm_text', models.TextField()),
                ('player', models.ForeignKey(help_text='The player who owns this character', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='characters', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Item Name', max_length=32)),
                ('rarity', models.CharField(choices=[('common', 'Common'), ('uncommon', 'Uncommon'), ('rare', 'Rare'), ('veryrare', 'Very Rare'), ('legendary', 'Legendary')], default='uncommon', help_text='Item rarity', max_length=16)),
                ('description', models.TextField()),
                ('object_id', models.PositiveIntegerField()),
                ('character', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='codex.character')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
            ],
        ),
        migrations.CreateModel(
            name='Consumable',
            fields=[
                ('item_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='codex.item')),
                ('type', models.TextField(choices=[('scroll', 'Spell scroll'), ('potion', 'Potion'), ('ammo', 'Ammunition'), ('gear', 'Adventuring Gear')], default='gear', help_text='Item type')),
                ('count', models.IntegerField(help_text='Number of charges / items remaining', null=True)),
            ],
            bases=('codex.item',),
        ),
        migrations.CreateModel(
            name='DMReward',
            fields=[
                ('event_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='codex.event')),
                ('hours', models.IntegerField(help_text='Number of service hours spent', null=True)),
                ('name', models.CharField(blank=True, help_text='Service reward name', max_length=32, null=True)),
                ('gold', models.IntegerField(help_text='Gold awarded', null=True)),
                ('downtime', models.IntegerField(help_text='Days of downtime', null=True)),
            ],
            bases=('codex.event',),
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('event_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='codex.event')),
                ('dm', models.CharField(max_length=32)),
                ('module', models.CharField(help_text='Module code', max_length=32)),
                ('name', models.CharField(blank=True, help_text='Module name', max_length=32, null=True)),
                ('location', models.CharField(blank=True, help_text='Where the game was organised or run', max_length=64, null=True)),
                ('gold', models.IntegerField(help_text='Gold awarded', null=True)),
                ('downtime', models.IntegerField(help_text='Days of downtime', null=True)),
            ],
            bases=('codex.event',),
        ),
        migrations.CreateModel(
            name='MagicItem',
            fields=[
                ('item_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='codex.item')),
                ('flavour', models.TextField(help_text='Flavour text')),
            ],
            bases=('codex.item',),
        ),
        migrations.CreateModel(
            name='Trade',
            fields=[
                ('event_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='codex.event')),
                ('sender_name', models.CharField(blank=True, help_text='Optional character name', max_length=64, null=True)),
                ('recipient_name', models.CharField(blank=True, help_text='Optional character name', max_length=64, null=True)),
                ('associated', models.ForeignKey(help_text='The other half of the trade', null=True, on_delete=django.db.models.deletion.SET_NULL, to='codex.trade')),
                ('item', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='codex.magicitem')),
                ('recipient', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='traded_in', to='codex.character')),
                ('sender', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='traded_out', to='codex.character')),
            ],
            bases=('codex.event',),
        ),
    ]
